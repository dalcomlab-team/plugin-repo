import java.text.MessageFormat

apply plugin: JavaBuildPlugin

/**
 * Java build plug-in for dalcom lab's AP server project
 *
 * @author @author JI-CHOEL HONG(jchong@dalcomlab.com)
 */
class JavaBuildPlugin implements Plugin<Project> {

    private Project project
    private String repoOwner
    private String projName
    private String mvnServer

    public static final String PUBLISH_TASK_GROUP_NAME = "dalcomlab-publishing"

    void apply(Project project) {
        this.project = project
        repoOwner = (String)project.findProperty("gpr.owner")
        projName = "maven-repo"
        mvnServer = (String)project.findProperty("gpr.mvn-server")
        registerGithubPublishingTasks()
        registerDalcomPublishingTasks()
        println "applied JavaBuildPlugin"
    }

    void registerGithubPublishingTasks() {
        PublishingExtension ext = (PublishingExtension) project.extensions["publishing"]
        ext.repositories(new Action<RepositoryHandler>() {
            @Override
            void execute(RepositoryHandler artifactRepositories) {
                artifactRepositories.maven(new Action<MavenArtifactRepository>() {
                    @Override
                    void execute(MavenArtifactRepository mavenArtifactRepository) {

                        String repoUrl = MessageFormat.format("https://{0}/{1}/{2}", mvnServer, repoOwner, projName)
                        mavenArtifactRepository.setName("GitHubPackages")
                        mavenArtifactRepository.setUrl(new URI(repoUrl))
                        mavenArtifactRepository.credentials(new Action<PasswordCredentials>() {
                            @Override
                            void execute(PasswordCredentials passwordCredentials) {

                                String user = project.ext.getProperty("repo-user")
                                String password = project.ext.getProperty("repo-token")

                                passwordCredentials.username(user)
                                passwordCredentials.password(password)
                            }
                        })
                    }
                })
            }
        })

    }

    void registerDalcomPublishingTasks() {
        project.tasks.register("outputBuildPrompt", OutputBuildPromptTask.class)
        project.tasks.register("publishReleaseToGithubPackages", PublishingForReleaseTask.class)
        project.tasks.register("publishSnapshotToGithubPackages", PublishingForSnapshotTask.class)
        project.tasks.register("publishReleaseToMavenLocal",PublishingLocalForReleaseTask.class)
        project.tasks.register("publishSnapshotToMavenLocal", PublishingLocalForSnapshotTask.class)
    }
}

/**
 * Publishing task for release artifact (jar)
 *
 * @author @author JI-CHOEL HONG(jchong@dalcomlab.com)
 */
class PublishingForReleaseTask extends DefaultTask {

    PublishingForReleaseTask() {
        super()
        this.group = JavaBuildPlugin.PUBLISH_TASK_GROUP_NAME

        Commons.createMavenPublications(project)

        Task publishingTask = project.tasks.findByPath("publishMavenPublicationToGitHubPackagesRepository")
        project.setVersion(project.getVersion().toString())

        dependsOn(publishingTask)
    }

    @TaskAction
    protected void run() {
        String repoOwner = (String)project.findProperty("gpr.owner")
        String projName = project.name
        String mvnServer = (String)project.findProperty("gpr.mvn-server")
        String msg = MessageFormat.format("java artifact published to maven repo({0}/{1}) >>> {2}-{3}",
                mvnServer, repoOwner, projName, project.getVersion())
        System.out.println(msg)
    }
}

/**
 * Publishing task for Snapshot artifact (jar and sources)
 *
 * @author @author JI-CHOEL HONG(jchong@dalcomlab.com)
 */
class PublishingForSnapshotTask extends DefaultTask {

    PublishingForSnapshotTask() {
        super()
        this.group = JavaBuildPlugin.PUBLISH_TASK_GROUP_NAME

        Commons.createMavenPublications(project)

        Task publishingTask = project.tasks.findByPath("publishMavenPublicationToGitHubPackagesRepository")
        project.setVersion(project.getVersion().toString() + "-SNAPSHOT")

        JavaPluginExtension javaPluginExtension = (JavaPluginExtension) project.extensions["java"]
        javaPluginExtension.withSourcesJar()

        dependsOn(publishingTask)
    }

    @TaskAction
    protected void run() {

        String repoOwner = (String)project.findProperty("gpr.owner")
        String projName = project.name
        String mvnServer = (String)project.findProperty("gpr.mvn-server")
        String msg = MessageFormat.format("java artifact published to maven repo({0}/{1}) >>> {2}-{3}",
                mvnServer, repoOwner, projName, project.getVersion())
        System.out.println(msg)
    }
}

/**
 * Publishing task for release artifact (jar) to local repo
 *
 * @author @author JI-CHOEL HONG(jchong@dalcomlab.com)
 */
class PublishingLocalForReleaseTask extends DefaultTask {

    PublishingLocalForReleaseTask() {
        super()
        this.group = JavaBuildPlugin.PUBLISH_TASK_GROUP_NAME

        Commons.createMavenPublications(project)

        Task publishingTask = project.tasks.findByPath("publishToMavenLocal")
        project.setVersion(project.getVersion().toString())

        dependsOn(publishingTask)
    }

    @TaskAction
    protected void run() {
        String projName = project.name
        String msg = MessageFormat.format("java artifact published to maven local repo >>> {0}-{1}",
                projName, project.getVersion())
        System.out.println(msg)
    }
}

/**
 * Publishing task for Snapshot artifact (jar) to local repo
 *
 * @author @author JI-CHOEL HONG(jchong@dalcomlab.com)
 */
class PublishingLocalForSnapshotTask extends DefaultTask {

    PublishingLocalForSnapshotTask() {
        super()
        this.group = JavaBuildPlugin.PUBLISH_TASK_GROUP_NAME

        Commons.createMavenPublications(project)

        Task publishingTaskForLocal = project.tasks.findByPath("publishToMavenLocal")
        project.setVersion(project.getVersion().toString() + "-SNAPSHOT")

        JavaPluginExtension javaPluginExtension = (JavaPluginExtension) project.extensions["java"]
        javaPluginExtension.withSourcesJar()

        dependsOn(publishingTaskForLocal)
    }

    @TaskAction
    protected void run() {

        String projName = project.name
        String msg = MessageFormat.format("java artifact published to maven local repo >>> {0}-{1}",
                projName, project.getVersion())
        System.out.println(msg)
    }
}

/**
 * Output build signal prompt and project properties.
 *
 * @author @author JI-CHOEL HONG(jchong@dalcomlab.com)
 */
class OutputBuildPromptTask extends DefaultTask {

    OutputBuildPromptTask() {
        super()
        this.group = JavaBuildPlugin.PUBLISH_TASK_GROUP_NAME
        Task buildTask = project.tasks.findByPath("build")
        buildTask.mustRunAfter(this)
    }

    @TaskAction
    protected void run() {
        try {
            URL url = new URL("https://raw.githubusercontent.com/dalcomlab/plugin-repo/main/buildPrompt.txt")
            // read text returned by server
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))
            String line
            while ((line = reader.readLine()) != null) {
                System.out.println(line)
            }
            reader.close()
        } catch (IOException ignored) {
            // NO-OP
        }

        System.out.println("Check gradle.properties")

        for (Map.Entry<String, ?> entry : project.properties.entrySet()) {
            if (entry.getKey().contains("gpr.")) {
                System.out.println(MessageFormat.format(" {0} >>> {1}", entry.getKey(), entry.getValue()))
            }
        }
        System.out.println("")
    }
}


/**
 * Common utility class for this plugin classes
 *
 * @author @author JI-CHOEL HONG(jchong@dalcomlab.com)
 */
class Commons {
    static void createMavenPublications(Project proj) {
        PublishingExtension publishingEx = (PublishingExtension) proj.extensions["publishing"]
        MavenPublication mavenPublication = (MavenPublication)publishingEx.publications.findByName("maven")
        if ( mavenPublication == null ) {
            publishingEx.publications.create("maven", MavenPublication.class, new Action<MavenPublication>() {
                void execute(MavenPublication publication) {
                    publication.from(proj.getComponents().getByName("java"))
                    publication.setGroupId(proj.getGroup().toString())
                    publication.setArtifactId(proj.name)
                }
            })

        }
    }
}
